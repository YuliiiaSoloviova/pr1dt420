from collections import UserDict
from datetime import datetime, timedelta
import re
import pickle
from colorama import init, Fore, Style

init(autoreset=True)

# ==== –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–æ–ª—ñ–≤ ====

class Field:
    def __init__(self, value):
        self.value = value

    def __str__(self):
        return str(self.value)

class Name(Field):
    pass

class Phone(Field):
    def __init__(self, value):
        if not re.fullmatch(r"\d{10}", value):
            raise ValueError("‚ùå –¢–µ–ª–µ—Ñ–æ–Ω –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ —Ä—ñ–≤–Ω–æ 10 —Ü–∏—Ñ—Ä.")
        super().__init__(value)

class Email(Field):
    def __init__(self, value):
        if value and not re.fullmatch(r"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$", value):
            raise ValueError("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email.")
        super().__init__(value)

class Address(Field):
    pass

class Birthday(Field):
    def __init__(self, value):
        try:
            self.date = datetime.strptime(value, "%d.%m.%Y")
            super().__init__(value)
        except ValueError:
            raise ValueError("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ DD.MM.YYYY")

# ==== –†–æ–±–æ—Ç–∞ –∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ ====

class Record:
    def __init__(self, name):
        self.name = Name(name)
        self.phones = []
        self.email = None
        self.address = None
        self.birthday = None

    def add_phone(self, phone):
        self.phones.append(Phone(phone))

    def add_email(self, email):
        self.email = Email(email)

    def add_address(self, address):
        self.address = Address(address)

    def add_birthday(self, birthday):
        self.birthday = Birthday(birthday)

    def __str__(self):
        phones = ', '.join(str(p) for p in self.phones) or "–ù–µ–º–∞—î"
        email = self.email.value if self.email else "–ù–µ–º–∞—î"
        address = self.address.value if self.address else "–ù–µ–º–∞—î"
        birthday = self.birthday.value if self.birthday else "–ù–µ–º–∞—î"
        return (f"–Ü–º'—è: {self.name.value}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω(–∏): {phones}\n"
                f"Email: {email}\n"
                f"–ê–¥—Ä–µ—Å–∞: {address}\n"
                f"–î–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: {birthday}")

class AddressBook(UserDict):
    def add_record(self, record):
        self.data[record.name.value] = record

    def find(self, name):
        return self.data.get(name)

    def delete(self, name):
        if name in self.data:
            del self.data[name]

    def get_upcoming_birthdays(self, days_ahead=7):
        today = datetime.today().date()
        result = []
        for record in self.data.values():
            if record.birthday:
                bday = record.birthday.date.date().replace(year=today.year)
                if bday < today:
                    bday = bday.replace(year=today.year + 1)
                delta = (bday - today).days
                if 0 <= delta <= days_ahead:
                    result.append((record.name.value, bday.strftime("%d.%m.%Y")))
        return result

# ==== –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ ====

def save_contacts(book, filename="addressbook.pkl"):
    with open(filename, "wb") as f:
        pickle.dump(book, f)
    print(Fore.GREEN + "‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ")

def load_contacts(filename="addressbook.pkl"):
    try:
        with open(filename, "rb") as f:
            return pickle.load(f)
    except (FileNotFoundError, EOFError):
        return AddressBook()

# ==== –ù–æ—Ç–∞—Ç–∫–∏ ====

class Note:
    def __init__(self, text, tags=None):
        self.text = text
        self.created = datetime.now()
        self.tags = tags if tags else []

    def edit(self, new_text):
        self.text = new_text
        self.created = datetime.now()

    def __str__(self):
        tags_str = f" [—Ç–µ–≥–∏: {', '.join(self.tags)}]" if self.tags else ""
        return f"{self.created.strftime('%Y-%m-%d %H:%M')} ‚Äî {self.text}{tags_str}"

class NoteBook:
    def __init__(self):
        self.notes = []

    def add_note(self, text, tags=None):
        note = Note(text, tags)
        self.notes.append(note)
        return note

    def list_notes(self):
        if not self.notes:
            return "–ù–æ—Ç–∞—Ç–æ–∫ –Ω–µ–º–∞—î."
        return "\n".join(f"{idx + 1}. {note}" for idx, note in enumerate(self.notes))

    def find_notes(self, keyword):
        result = [note for note in self.notes if keyword.lower() in note.text.lower()]
        return result

    def edit_note(self, index, new_text):
        if 0 <= index < len(self.notes):
            self.notes[index].edit(new_text)
            return True
        return False

    def delete_note(self, index):
        if 0 <= index < len(self.notes):
            del self.notes[index]
            return True
        return False

    def save_notes(self, filename="notebook.pkl"):
        with open(filename, "wb") as f:
            pickle.dump(self, f)
        print(Fore.GREEN + "‚úÖ –ù–æ—Ç–∞—Ç–∫–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ")

    @staticmethod
    def load_notes(filename="notebook.pkl"):
        try:
            with open(filename, "rb") as f:
                return pickle.load(f)
        except FileNotFoundError:
            return NoteBook()

# ==== –ú–µ–Ω—é ====

book = load_contacts()
notebook = NoteBook.load_notes()

def show_menu():
    print(Fore.BLUE + Style.BRIGHT + "\nüìò –ú–µ–Ω—é")
    print(Fore.BLUE + "1. –î–æ–¥–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç")
    print("2. –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏")
    print("3. –ü–æ—à—É–∫ –∫–æ–Ω—Ç–∞–∫—Ç—É")
    print("4. –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç")
    print("5. –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç")
    print("6. –°–ø–∏—Å–æ–∫ –¥–Ω—ñ–≤ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è")
    print("7. –î–æ–¥–∞—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É")
    print("8. –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –Ω–æ—Ç–∞—Ç–∫–∏")
    print("9. –ü–æ—à—É–∫ –Ω–æ—Ç–∞—Ç–æ–∫")
    print("10. –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É")
    print("11. –í–∏–¥–∞–ª–∏—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É")
    print("0. –í–∏—Ö—ñ–¥")

def add_contact():
    print(Fore.CYAN + "üîπ –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –∫–æ–Ω—Ç–∞–∫—Ç")
    name = input("–Ü–º‚Äô—è: ")
    phone = input("–¢–µ–ª–µ—Ñ–æ–Ω (10 —Ü–∏—Ñ—Ä): ")
    email = input("Email: ")
    address = input("–ê–¥—Ä–µ—Å–∞: ")
    birthday = input("–î–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è (DD.MM.YYYY): ")

    if name in book.data:
        print(Fore.YELLOW + "‚ö†Ô∏è –ö–æ–Ω—Ç–∞–∫—Ç –∑ —Ç–∞–∫–∏–º —ñ–º‚Äô—è–º –≤–∂–µ —ñ—Å–Ω—É—î.")
        input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏...")
        return

    try:
        record = Record(name)
        if phone:
            record.add_phone(phone)
        if email:
            record.add_email(email)
        if address:
            record.add_address(address)
        if birthday:
            record.add_birthday(birthday)

        book.add_record(record)
        print(Fore.GREEN + "‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –¥–æ–¥–∞–Ω–æ.")
    except Exception as e:
        print(Fore.RED + f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")
    input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏...")

def search_contact():
    name = input("–í–≤–µ–¥—ñ—Ç—å —ñ–º‚Äô—è –¥–ª—è –ø–æ—à—É–∫—É: ")
    record = book.find(name)
    print(str(record) if record else Fore.YELLOW + "–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏...")

def edit_contact():
    name = input("–Ü–º‚Äô—è –∫–æ–Ω—Ç–∞–∫—Ç—É –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è: ")
    record = book.find(name)
    if not record:
        print(Fore.YELLOW + "–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏...")
        return

    print(Fore.CYAN + f"–†–µ–¥–∞–≥—É—î–º–æ –∫–æ–Ω—Ç–∞–∫—Ç: {record.name.value}")
    print("1. –î–æ–¥–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω")
    print("2. –û—á–∏—Å—Ç–∏—Ç–∏ –π –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ñ —Ç–µ–ª–µ—Ñ–æ–Ω–∏")
    choice = input("–í–∞—à –≤–∏–±—ñ—Ä (1 –∞–±–æ 2): ")

    if choice == "1":
        new_phone = input("–ù–æ–≤–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω (10 —Ü–∏—Ñ—Ä): ")
        try:
            record.add_phone(new_phone)
            print(Fore.GREEN + "‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–¥–∞–Ω–æ.")
        except ValueError as e:
            print(Fore.RED + str(e))
    elif choice == "2":
        record.phones = []
        new_phone = input("–ù–æ–≤–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω (10 —Ü–∏—Ñ—Ä): ")
        try:
            record.add_phone(new_phone)
            print(Fore.GREEN + "‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –æ–Ω–æ–≤–ª–µ–Ω–æ.")
        except ValueError as e:
            print(Fore.RED + str(e))
    else:
        print(Fore.RED + "–ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä.")

    input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏...")

def delete_contact():
    name = input("–Ü–º‚Äô—è –∫–æ–Ω—Ç–∞–∫—Ç—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: ")
    book.delete(name)
    print(Fore.GREEN + "‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –≤–∏–¥–∞–ª–µ–Ω–æ.")
    input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏...")

def upcoming_birthdays():
    try:
        days = int(input("–ß–µ—Ä–µ–∑ —Å–∫—ñ–ª—å–∫–∏ –¥–Ω—ñ–≤ –ø–æ–∫–∞–∑–∞—Ç–∏ –¥–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: "))
    except ValueError:
        print(Fore.RED + "‚ùå –í–≤–µ–¥—ñ—Ç—å —Ü—ñ–ª–µ —á–∏—Å–ª–æ.")
        input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏...")
        return
    upcoming = book.get_upcoming_birthdays(days)
    if not upcoming:
        print(Fore.YELLOW + "–ù–µ–º–∞—î –Ω–∞–π–±–ª–∏–∂—á–∏—Ö –¥–Ω—ñ–≤ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è.")
    else:
        print("\n".join([f"{name}: {date}" for name, date in upcoming]))
    input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏...")

def add_note():
    text = input("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –Ω–æ—Ç–∞—Ç–∫–∏: ")
    tags = input("–¢–µ–≥–∏ (—á–µ—Ä–µ–∑ –∫–æ–º—É): ").split(",")
    notebook.add_note(text, [t.strip() for t in tags if t.strip()])
    print(Fore.GREEN + "‚úÖ –ù–æ—Ç–∞—Ç–∫—É –¥–æ–¥–∞–Ω–æ.")
    input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏...")

def search_notes():
    keyword = input("–ö–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ—à—É–∫—É: ")
    results = notebook.find_notes(keyword)
    print("\n".join(str(n) for n in results) if results else Fore.YELLOW + "–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏...")

def edit_note():
    print(notebook.list_notes())
    try:
        idx = int(input("–ù–æ–º–µ—Ä –Ω–æ—Ç–∞—Ç–∫–∏ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è: ")) - 1
        text = input("–ù–æ–≤–∏–π —Ç–µ–∫—Å—Ç: ")
        if notebook.edit_note(idx, text):
            print(Fore.GREEN + "‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ.")
        else:
            print(Fore.RED + "–ü–æ–º–∏–ª–∫–∞.")
    except ValueError:
        print(Fore.RED + "‚ùå –í–≤–µ–¥–µ–Ω–æ –Ω–µ—á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.")
    input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏...")

def delete_note():
    print(notebook.list_notes())
    try:
        idx = int(input("–ù–æ–º–µ—Ä –Ω–æ—Ç–∞—Ç–∫–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: ")) - 1
        if notebook.delete_note(idx):
            print(Fore.GREEN + "‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ.")
        else:
            print(Fore.RED + "–ü–æ–º–∏–ª–∫–∞.")
    except ValueError:
        print(Fore.RED + "‚ùå –í–≤–µ–¥–µ–Ω–æ –Ω–µ—á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è.")
    input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏...")

def show_contacts_formatted():
    if not book.data:
        print(Fore.YELLOW + "üì≠ –ö–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –Ω–µ–º–∞—î.")
    else:
        for record in book.data.values():
            print(Fore.CYAN + "-"*40)
            print(record)
        print(Fore.CYAN + "-"*40)
    input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏...")

def run():
    while True:
        show_menu()
        choice = input("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é: ")
        if choice == "1": add_contact()
        elif choice == "2": show_contacts_formatted()
        elif choice == "3": search_contact()
        elif choice == "4": edit_contact()
        elif choice == "5": delete_contact()
        elif choice == "6": upcoming_birthdays()
        elif choice == "7": add_note()
        elif choice == "8": print(Fore.YELLOW + notebook.list_notes()); input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter...")
        elif choice == "9": search_notes()
        elif choice == "10": edit_note()
        elif choice == "11": delete_note()
        elif choice == "0":
            save_contacts(book)
            notebook.save_notes()
            print(Fore.CYAN + "–î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
            break
        else:
            print(Fore.RED + "–ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            input("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏...")

if __name__ == "__main__":
    run()