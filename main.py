from collections import UserDict
from datetime import datetime, timedelta
import re
import pickle


# ==== –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–æ–ª—ñ–≤ (–ú–∞—Ä–∏–Ω–∞) ====


class Field:
    def __init__(self, value):
        self.value = value

    def __str__(self):
        return str(self.value)


class Name(Field):
    pass


class Phone(Field):
    def __init__(self, value):
        if not re.fullmatch(r"\d{10}", value):
            raise ValueError("–¢–µ–ª–µ—Ñ–æ–Ω –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ —Ä—ñ–≤–Ω–æ 10 —Ü–∏—Ñ—Ä.")
        super().__init__(value)


class Email(Field):
    def __init__(self, value):
        if value and not re.fullmatch(r"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$", value):
            raise ValueError("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email.")
        super().__init__(value)


class Address(Field):
    pass


class Birthday(Field):
    def __init__(self, value):
        try:
            self.date = datetime.strptime(value, "%d.%m.%Y")
            super().__init__(value)
        except ValueError:
            raise ValueError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ DD.MM.YYYY")


# ==== –†–æ–±–æ—Ç–∞ –∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ (–û–ª–µ–Ω–∞) ====


class Record:
    def __init__(self, name):
        self.name = Name(name)
        self.phones = []
        self.email = None
        self.address = None
        self.birthday = None

    def add_phone(self, phone):
        self.phones.append(Phone(phone))

    def add_email(self, email):
        self.email = Email(email)

    def add_address(self, address):
        self.address = Address(address)

    def add_birthday(self, birthday):
        self.birthday = Birthday(birthday)

    def __str__(self):
        phones = ', '.join(str(p) for p in self.phones) or "–ù–µ–º–∞—î"
        email = self.email.value if self.email else "–ù–µ–º–∞—î"
        address = self.address.value if self.address else "–ù–µ–º–∞—î"
        birthday = self.birthday.value if self.birthday else "–ù–µ–º–∞—î"
        return (f"–Ü–º'—è: {self.name.value}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω(–∏): {phones}\n"
                f"Email: {email}\n"
                f"–ê–¥—Ä–µ—Å–∞: {address}\n"
                f"–î–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: {birthday}")


class AddressBook(UserDict):
    def add_record(self, record):
        self.data[record.name.value] = record

    def find(self, name):
        return self.data.get(name)

    def delete(self, name):
        if name in self.data:
            del self.data[name]

    def get_upcoming_birthdays(self, days_ahead=7):
        today = datetime.today().date()
        result = []
        for record in self.data.values():
            if record.birthday:
                bday = record.birthday.date.date().replace(year=today.year)
                if bday < today:
                    bday = bday.replace(year=today.year + 1)
                delta = (bday - today).days
                if 0 <= delta <= days_ahead:
                    result.append((record.name.value, bday.strftime("%d.%m.%Y")))
        return result


# ==== –ù–æ—Ç–∞—Ç–∫–∏ (–î–∞—à–∞) ====


class Note:
    def __init__(self, text, tags=None):
        self.text = text
        self.created = datetime.now()
        self.tags = tags if tags else []

    def edit(self, new_text):
        self.text = new_text
        self.created = datetime.now()

    def __str__(self):
        tags_str = f" [—Ç–µ–≥–∏: {', '.join(self.tags)}]" if self.tags else ""
        return f"{self.created.strftime('%Y-%m-%d %H:%M')} ‚Äî {self.text}{tags_str}"


class NoteBook:
    def __init__(self):
        self.notes = []

    def add_note(self, text, tags=None):
        note = Note(text, tags)
        self.notes.append(note)
        return note

    def list_notes(self):
        if not self.notes:
            return "–ù–æ—Ç–∞—Ç–æ–∫ –Ω–µ–º–∞—î."
        return "\n".join(f"{idx + 1}. {note}" for idx, note in enumerate(self.notes))

    def find_notes(self, keyword):
        result = [note for note in self.notes if keyword.lower() in note.text.lower()]
        return result

    def edit_note(self, index, new_text):
        if 0 <= index < len(self.notes):
            self.notes[index].edit(new_text)
            return True
        return False

    def delete_note(self, index):
        if 0 <= index < len(self.notes):
            del self.notes[index]
            return True
        return False

    def save_notes(self, filename="notebook.pkl"):
        with open(filename, "wb") as f:
            pickle.dump(self, f)

    @staticmethod
    def load_notes(filename="notebook.pkl"):
        try:
            with open(filename, "rb") as f:
                return pickle.load(f)
        except FileNotFoundError:
            return NoteBook()


# ==== –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ (–Ω–æ–≤–µ) ====

def save_contacts(book, filename="addressbook.pkl"):
    with open(filename, "wb") as f:
        pickle.dump(book, f)

def load_contacts(filename="addressbook.pkl"):
    try:
        with open(filename, "rb") as f:
            return pickle.load(f)
    except FileNotFoundError:
        return AddressBook()


# ==== –ú–µ–Ω—é —Ç–∞ –ª–æ–≥—ñ–∫–∞ –≤–∑–∞—î–º–æ–¥—ñ—ó (–Æ–ª—è) ====

book = load_contacts()
notebook = NoteBook.load_notes()


def input_error(func):
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except (IndexError, KeyError, ValueError) as e:
            return f"–ü–æ–º–∏–ª–∫–∞: {str(e)}"
    return wrapper


@input_error
def add_contact():
    name = input("–Ü–º‚Äô—è: ")
    phone = input("–¢–µ–ª–µ—Ñ–æ–Ω (10 —Ü–∏—Ñ—Ä): ")
    email = input("Email: ")
    address = input("–ê–¥—Ä–µ—Å–∞: ")
    birthday = input("–î–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è (DD.MM.YYYY): ")

    if name in book.data:
        return "–ö–æ–Ω—Ç–∞–∫—Ç –∑ —Ç–∞–∫–∏–º —ñ–º‚Äô—è–º –≤–∂–µ —ñ—Å–Ω—É—î."

    record = Record(name)
    if phone:
        record.add_phone(phone)
    if email:
        record.add_email(email)
    if address:
        record.add_address(address)
    if birthday:
        record.add_birthday(birthday)

    book.add_record(record)
    return "–ö–æ–Ω—Ç–∞–∫—Ç –¥–æ–¥–∞–Ω–æ."


@input_error
def show_all_contacts():
    if not book.data:
        return "–ö–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –Ω–µ–º–∞—î."
    return "\n\n".join(str(r) for r in book.data.values())


@input_error
def show_contact():
    name = input("–í–≤–µ–¥—ñ—Ç—å —ñ–º‚Äô—è –∫–æ–Ω—Ç–∞–∫—Ç—É: ")
    record = book.find(name)
    return str(record) if record else "–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."


@input_error
def edit_contact():
    name = input("–Ü–º‚Äô—è –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è: ")
    record = book.find(name)
    if not record:
        return "–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
    new_phone = input("–ù–æ–≤–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω: ")
    record.phones = []
    record.add_phone(new_phone)
    return "–ö–æ–Ω—Ç–∞–∫—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ."


@input_error
def delete_contact():
    name = input("–Ü–º‚Äô—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: ")
    book.delete(name)
    return "–ö–æ–Ω—Ç–∞–∫—Ç –≤–∏–¥–∞–ª–µ–Ω–æ."


@input_error
def list_birthdays():
    days = int(input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤: "))
    upcoming = book.get_upcoming_birthdays(days)
    if not upcoming:
        return "–ù–µ–º–∞—î –¥–Ω—ñ–≤ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è."
    return "\n".join([f"{name}: {date}" for name, date in upcoming])


@input_error
def add_note():
    text = input("–ù–æ—Ç–∞—Ç–∫–∞: ")
    tags = input("–¢–µ–≥–∏ (—á–µ—Ä–µ–∑ –∫–æ–º—É): ").split(",")
    notebook.add_note(text, [t.strip() for t in tags])
    return "–ù–æ—Ç–∞—Ç–∫—É –¥–æ–¥–∞–Ω–æ."


@input_error
def search_notes():
    keyword = input("–ö–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ: ")
    found = notebook.find_notes(keyword)
    return "\n\n".join(str(n) for n in found) if found else "–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."


@input_error
def edit_note():
    print(notebook.list_notes())
    idx = int(input("–ù–æ–º–µ—Ä –Ω–æ—Ç–∞—Ç–∫–∏: ")) - 1
    text = input("–ù–æ–≤–∏–π —Ç–µ–∫—Å—Ç: ")
    return "–û–Ω–æ–≤–ª–µ–Ω–æ." if notebook.edit_note(idx, text) else "–ü–æ–º–∏–ª–∫–∞."


@input_error
def delete_note():
    print(notebook.list_notes())
    idx = int(input("–ù–æ–º–µ—Ä –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è: ")) - 1
    return "–í–∏–¥–∞–ª–µ–Ω–æ." if notebook.delete_note(idx) else "–ü–æ–º–∏–ª–∫–∞."


def main_menu():
    while True:
        print("\n" + "="*40)
        print("üìò –ú–µ–Ω—é –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ —Ç–∞ –Ω–æ—Ç–∞—Ç–æ–∫")
        print("="*40)
        print("1. –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –∫–æ–Ω—Ç–∞–∫—Ç")
        print("2. –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏")
        print("3. –ü–æ—à—É–∫ —É –∫–Ω–∏–∑—ñ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤")
        print("4. –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç")
        print("5. –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç")
        print("6. –°–ø–∏—Å–æ–∫ –¥–Ω—ñ–≤ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ N –¥–Ω—ñ–≤")
        print("7. –î–æ–¥–∞—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É")
        print("8. –ü–æ—à—É–∫ —É –Ω–æ—Ç–∞—Ç–∫–∞—Ö")
        print("9. –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É")
        print("10. –í–∏–¥–∞–ª–∏—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É")
        print("0. –í–∏—Ö—ñ–¥")
        choice = input("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é: ")

        if choice == "1": print(add_contact())
        elif choice == "2": print(show_all_contacts())
        elif choice == "3": print(show_contact())
        elif choice == "4": print(edit_contact())
        elif choice == "5": print(delete_contact())
        elif choice == "6": print(list_birthdays())
        elif choice == "7": print(add_note())
        elif choice == "8": print(search_notes())
        elif choice == "9": print(edit_note())
        elif choice == "10": print(delete_note())
        elif choice == "0":
            notebook.save_notes()
            save_contacts(book)
            print("–î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
            break
        else:
            print("–ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä.")


if __name__ == "__main__":
    main_menu()