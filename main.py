import re
from datetime import datetime, timedelta


# --- –î–∞–Ω—ñ ---
contacts = [
    {
        "–§–Ü–û": "–Ü–≤–∞–Ω–µ–Ω–∫–æ –Ü–≤–∞–Ω –Ü–≤–∞–Ω–æ–≤–∏—á",
        "–ê–¥—Ä–µ—Å–∞": "–ö–∏—ó–≤, –≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫ 1",
        "–¢–µ–ª–µ—Ñ–æ–Ω": "+380991112233",
        "Email": "ivan@gmail.com",
        "–î–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è": "2000-08-15"
    },
    {
        "–§–Ü–û": "–ü–µ—Ç—Ä–µ–Ω–∫–æ –û–ª–µ–Ω–∞ –ú–∏–∫–æ–ª–∞—ó–≤–Ω–∞",
        "–ê–¥—Ä–µ—Å–∞": "–õ—å–≤—ñ–≤, –≤—É–ª. –®–µ–≤—á–µ–Ω–∫–∞ 22",
        "–¢–µ–ª–µ—Ñ–æ–Ω": "+380671234567",
        "Email": "olena@gmail.com",
        "–î–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è": "1995-07-20"
    }
]


notes = [
    {
        "–¢–µ–∫—Å—Ç": "–ö—É–ø–∏—Ç–∏ –ø–æ–¥–∞—Ä—É–Ω–æ–∫",
        "–§–Ü–û": "–Ü–≤–∞–Ω–µ–Ω–∫–æ –Ü–≤–∞–Ω –Ü–≤–∞–Ω–æ–≤–∏—á"
    },
    {
        "–¢–µ–∫—Å—Ç": "–ü–æ–¥–∑–≤–æ–Ω–∏—Ç–∏ —â–æ–¥–æ –∑—É—Å—Ç—Ä—ñ—á—ñ",
        "–§–Ü–û": "–ü–µ—Ç—Ä–µ–Ω–∫–æ –û–ª–µ–Ω–∞ –ú–∏–∫–æ–ª–∞—ó–≤–Ω–∞"
    }
]


# --- –í–∞–ª—ñ–¥–∞—Ü—ñ—ó –ú–∞—Ä–∏–Ω–∞---



# --- –ö–æ–Ω—Ç–∞–∫—Ç–∏ –û–ª–µ–Ω–∞---



# --- –ù–æ—Ç–∞—Ç–∫–∏ –î–∞—à–∞ --- 
from datetime import datetime
import pickle


class Note:
    def __init__(self, text, tags=None):
        self.text = text
        self.created = datetime.now()
        self.tags = tags if tags else []

    def edit(self, new_text):
        self.text = new_text
        self.created = datetime.now()

    def __str__(self):
        tags_str = f" [—Ç–µ–≥–∏: {', '.join(self.tags)}]" if self.tags else ""
        return f"{self.created.strftime('%Y-%m-%d %H:%M')} ‚Äî {self.text}{tags_str}"


class NoteBook:
    def __init__(self):
        self.notes = []

    def add_note(self, text, tags=None):
        note = Note(text, tags)
        self.notes.append(note)
        return note

    def list_notes(self):
        if not self.notes:
            return "–ù–æ—Ç–∞—Ç–æ–∫ –Ω–µ–º–∞—î."
        return "\n\n".join(f"{idx + 1}. {note}" for idx, note in enumerate(self.notes))

    def find_notes(self, keyword):
        result = [note for note in self.notes if keyword.lower() in note.text.lower()]
        return result

    def edit_note(self, index, new_text):
        if 0 <= index < len(self.notes):
            self.notes[index].edit(new_text)
            return True
        return False

    def delete_note(self, index):
        if 0 <= index < len(self.notes):
            del self.notes[index]
            return True
        return False

    def save_notes(self, filename="notebook.pkl"):
        with open(filename, "wb") as f:
            pickle.dump(self, f)

    @staticmethod
    def load_notes(filename="notebook.pkl"):
        try:
            with open(filename, "rb") as f:
                return pickle.load(f)
        except FileNotFoundError:
            return NoteBook()



from notes import NoteBook

notebook = NoteBook.load_notes()


def handle_add_note(args):
    if not args:
        return "–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –Ω–æ—Ç–∞—Ç–∫–∏ –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏."
    text = args[0]
    tags = args[1:] if len(args) > 1 else []
    notebook.add_note(text, tags)
    return "–ù–æ—Ç–∞—Ç–∫—É –¥–æ–¥–∞–Ω–æ."


def handle_show_notes(_):
    return notebook.list_notes()


def handle_find_note(args):
    if not args:
        return "–í–≤–µ–¥—ñ—Ç—å —Å–ª–æ–≤–æ –¥–ª—è –ø–æ—à—É–∫—É."
    result = notebook.find_notes(args[0])
    if result:
        return "\n\n".join(str(note) for note in result)
    return "–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."


def handle_edit_note(args):
    if len(args) < 2:
        return "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –Ω–æ—Ç–∞—Ç–∫–∏ —Ç–∞ –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç."
    try:
        index = int(args[0]) - 1
        new_text = " ".join(args[1:])
        if notebook.edit_note(index, new_text):
            return "–ù–æ—Ç–∞—Ç–∫—É –≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–æ."
        return "–ù–æ—Ç–∞—Ç–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
    except ValueError:
        return "–ù–æ–º–µ—Ä –Ω–æ—Ç–∞—Ç–∫–∏ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º."


def handle_delete_note(args):
    if len(args) < 1:
        return "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –Ω–æ—Ç–∞—Ç–∫–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è."
    try:
        index = int(args[0]) - 1
        if notebook.delete_note(index):
            return "–ù–æ—Ç–∞—Ç–∫—É –≤–∏–¥–∞–ª–µ–Ω–æ."
        return "–ù–æ—Ç–∞—Ç–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
    except ValueError:
        return "–ù–æ–º–µ—Ä –Ω–æ—Ç–∞—Ç–∫–∏ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º."


COMMANDS = {
    "add-note": handle_add_note,
    "show-notes": handle_show_notes,
    "find-note": handle_find_note,
    "edit-note": handle_edit_note,
    "delete-note": handle_delete_note,
}


def main():
    print("–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ –∑ –Ω–æ—Ç–∞—Ç–∫–∞–º–∏ (–≤–≤–µ–¥—ñ—Ç—å 'exit' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è)")
    while True:
        user_input = input(">> ").strip()
        if not user_input:
            continue
        if user_input.lower() in ("exit", "quit", "close"):
            notebook.save_notes()
            print("–ù–æ—Ç–∞—Ç–∫–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!")
            break

        parts = user_input.split()
        command = parts[0].lower()
        args = parts[1:]

        handler = COMMANDS.get(command)
        if handler:
            result = handler(args)
            print(result)
        else:
            print("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")


if __name__ == "__main__":
    main()




# --- –ú–µ–Ω—é –Æ–ª—è ---
def main_menu():
    while True:
        print("\n" + "="*40)
        print("üìò –ú–µ–Ω—é –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ —Ç–∞ –Ω–æ—Ç–∞—Ç–æ–∫")
        print("="*40)
        print("1. –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –∫–æ–Ω—Ç–∞–∫—Ç")
        print("2. –ü–æ—à—É–∫ —É –∫–Ω–∏–∑—ñ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤")
        print("3. –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç")
        print("4. –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç")
        print("5. –°–ø–∏—Å–æ–∫ –¥–Ω—ñ–≤ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ N –¥–Ω—ñ–≤")
        print("6. –î–æ–¥–∞—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É")
        print("7. –ü–æ—à—É–∫ —É –Ω–æ—Ç–∞—Ç–∫–∞—Ö")
        print("8. –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É")
        print("9. –í–∏–¥–∞–ª–∏—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É")
        print("0. –í–∏—Ö—ñ–¥")
        choice = input("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é: ")


        if choice == "1":
            add_contact()
        elif choice == "2":
            search_contacts()
        elif choice == "3":
            edit_contact()
        elif choice == "4":
            delete_contact()
        elif choice == "5":
            try:
                n = int(input("–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤: "))
                list_birthdays(n)
            except:
                print("‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ.")
        elif choice == "6":
            add_note()
        elif choice == "7":
            search_notes()
        elif choice == "8":
            edit_note()
        elif choice == "9":
            delete_note()
        elif choice == "0":
            print("üëã –í–∏—Ö—ñ–¥ –∑ –ø—Ä–æ–≥—Ä–∞–º–∏.")
            break
        else:
            print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä.")
       
        pause()


# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–∏
if __name__ == "__main__":
    main_menu()

