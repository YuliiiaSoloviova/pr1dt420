from collections import UserDict
from datetime import datetime, timedelta
import re


# === –ú–æ–¥–µ–ª—ñ –¥–∞–Ω–∏—Ö ===

class Field:
    def __init__(self, value):
        self.value = value

    def __str__(self):
        return str(self.value)


class Name(Field):
    pass


class Phone(Field):
    def __init__(self, value):
        if not re.fullmatch(r"\d{10}", value):
            raise ValueError("–¢–µ–ª–µ—Ñ–æ–Ω –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ —Ä—ñ–≤–Ω–æ 10 —Ü–∏—Ñ—Ä.")
        super().__init__(value)


class Email(Field):
    def __init__(self, value):
        if value and not re.fullmatch(r"[^@]+@[^@]+\.[^@]+", value):
            raise ValueError("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç email.")
        super().__init__(value)


class Address(Field):
    pass


class Birthday(Field):
    def __init__(self, value):
        try:
            self.date = datetime.strptime(value, "%d.%m.%Y")
            super().__init__(value)
        except ValueError:
            raise ValueError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ DD.MM.YYYY")


class Record:
    def __init__(self, name):
        self.name = Name(name)
        self.phones = []
        self.email = None
        self.address = None
        self.birthday = None

    def add_phone(self, phone):
        self.phones.append(Phone(phone))

    def add_email(self, email):
        self.email = Email(email)

    def add_address(self, address):
        self.address = Address(address)

    def add_birthday(self, birthday):
        self.birthday = Birthday(birthday)

    def __str__(self):
        phones = ', '.join(str(p) for p in self.phones) or "–ù–µ–º–∞—î"
        email = self.email.value if self.email else "–ù–µ–º–∞—î"
        address = self.address.value if self.address else "–ù–µ–º–∞—î"
        birthday = self.birthday.value if self.birthday else "–ù–µ–º–∞—î"
        return (f"–Ü–º'—è: {self.name.value}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω(–∏): {phones}\n"
                f"Email: {email}\n"
                f"–ê–¥—Ä–µ—Å–∞: {address}\n"
                f"–î–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: {birthday}")


class AddressBook(UserDict):
    def add_record(self, record):
        self.data[record.name.value] = record

    def find(self, name):
        return self.data.get(name)

    def delete(self, name):
        if name in self.data:
            del self.data[name]

    def get_upcoming_birthdays(self, days_ahead=7):
        today = datetime.today().date()
        result = []

        for record in self.data.values():
            if record.birthday:
                bday = record.birthday.date.date().replace(year=today.year)
                if bday < today:
                    bday = bday.replace(year=today.year + 1)
                delta = (bday - today).days
                if 0 <= delta <= days_ahead:
                    result.append((record.name.value, bday.strftime("%d.%m.%Y")))
        return result


# === –û–±—Ä–æ–±–Ω–∏–∫–∏ ===

def input_error(func):
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except (IndexError, KeyError, ValueError) as e:
            return f"–ü–æ–º–∏–ª–∫–∞: {str(e)}"
    return wrapper


@input_error
def add_contact(book):
    name = input("–Ü–º‚Äô—è: ")
    phone = input("–¢–µ–ª–µ—Ñ–æ–Ω (10 —Ü–∏—Ñ—Ä): ")
    email = input("Email: ")
    address = input("–ê–¥—Ä–µ—Å–∞: ")
    birthday = input("–î–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è (DD.MM.YYYY): ")

    if name in book.data:
        return "–ö–æ–Ω—Ç–∞–∫—Ç –∑ —Ç–∞–∫–∏–º —ñ–º‚Äô—è–º –≤–∂–µ —ñ—Å–Ω—É—î."

    record = Record(name)
    if phone:
        record.add_phone(phone)
    if email:
        record.add_email(email)
    if address:
        record.add_address(address)
    if birthday:
        record.add_birthday(birthday)

    book.add_record(record)
    return "–ö–æ–Ω—Ç–∞–∫—Ç –¥–æ–¥–∞–Ω–æ."


@input_error
def show_all_contacts(book):
    if not book.data:
        return "–ö–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –Ω–µ–º–∞—î."
    return "\n\n".join(str(r) for r in book.data.values())


@input_error
def show_contact(book):
    name = input("–í–≤–µ–¥—ñ—Ç—å —ñ–º‚Äô—è –∫–æ–Ω—Ç–∞–∫—Ç—É: ")
    record = book.find(name)
    if record:
        return str(record)
    return "–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."


@input_error
def edit_contact(book):
    name = input("–í–≤–µ–¥—ñ—Ç—å —ñ–º‚Äô—è –∫–æ–Ω—Ç–∞–∫—Ç—É, —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏: ")
    record = book.find(name)
    if not record:
        return "–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."

    print(f"\n–†–µ–¥–∞–≥—É—î–º–æ –∫–æ–Ω—Ç–∞–∫—Ç: {record.name.value}")
    print("–ó–∞–ª–∏—à—Ç–µ –ø–æ–ª–µ –ø–æ—Ä–æ–∂–Ω—ñ–º, —è–∫—â–æ –Ω–µ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –π–æ–≥–æ.")

    new_name = input(f"–ù–æ–≤–µ —ñ–º‚Äô—è (–∑–∞—Ä–∞–∑: {record.name.value}): ").strip()
    new_phone = input("–ù–æ–≤–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω (10 —Ü–∏—Ñ—Ä): ").strip()
    new_email = input(f"–ù–æ–≤–∏–π email (–∑–∞—Ä–∞–∑: {record.email.value if record.email else '–Ω–µ–º–∞—î'}): ").strip()
    new_address = input(f"–ù–æ–≤–∞ –∞–¥—Ä–µ—Å–∞ (–∑–∞—Ä–∞–∑: {record.address.value if record.address else '–Ω–µ–º–∞—î'}): ").strip()
    new_birthday = input(f"–ù–æ–≤–∏–π –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è (–∑–∞—Ä–∞–∑: {record.birthday.value if record.birthday else '–Ω–µ–º–∞—î'}): ").strip()

    if new_name:
        record.name = Name(new_name)
        book.data[new_name] = book.data.pop(name)

    if new_phone:
        record.phones = []
        record.add_phone(new_phone)

    if new_email:
        record.add_email(new_email)

    if new_address:
        record.add_address(new_address)

    if new_birthday:
        record.add_birthday(new_birthday)

    return "–ö–æ–Ω—Ç–∞–∫—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ."


@input_error
def upcoming_birthdays(book):
    days_str = input("–ß–µ—Ä–µ–∑ —Å–∫—ñ–ª—å–∫–∏ –¥–Ω—ñ–≤ –ø–æ–∫–∞–∑–∞—Ç–∏ –¥–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è? (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 7): ")
    days = int(days_str)

    upcoming = book.get_upcoming_birthdays(days)
    if not upcoming:
        return f"–ù–µ–º–∞—î –¥–Ω—ñ–≤ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ—Ç—è–≥–æ–º –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö {days} –¥–Ω—ñ–≤."
    return "\n".join([f"{name}: {date}" for name, date in upcoming])


# === –ú–µ–Ω—é ===

def print_menu():
    print("\n –∫–æ–º–∞–Ω–¥—É:")
    print("1. –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –∫–æ–Ω—Ç–∞–∫—Ç")
    print("2. –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏")
    print("3. –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç")
    print("4. –ü–æ–∫–∞–∑–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç –∑–∞ —ñ–º‚Äô—è–º")
    print("5. –ü–æ–∫–∞–∑–∞—Ç–∏ –¥–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ N –¥–Ω—ñ–≤")
    print("6. –í–∏–π—Ç–∏")


def main():
    book = AddressBook()
    print("üëã –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–º—ñ—á–Ω–∏–∫–∞!")

    while True:
        print_menu()
        command = input("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥–∏: ").strip()

        if command == "1":
            print(add_contact(book))
        elif command == "2":
            print(show_all_contacts(book))
        elif command == "3":
            print(edit_contact(book))
        elif command == "4":
            print(show_contact(book))
        elif command == "5":
            print(upcoming_birthdays(book))
        elif command == "6":
            print("–î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è! üëã")
            break
        else:
            print("–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")


if __name__ == "__main__":
    main()
